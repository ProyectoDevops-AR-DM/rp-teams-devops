name: CI Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean package

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_USERNAME }}/products-service-example:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/products-service-example:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Este trabajo se ejecutará solo si el trabajo de build tiene éxito

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Obtener el código del repositorio

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'  # Puedes especificar una versión en lugar de 'latest' para asegurar la compatibilidad futura

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name eks-proyectodevops --region ${{ secrets.AWS_REGION }}
        # Actualiza el archivo kubeconfig con la configuración del cluster EKS

      - name: Validate deployment YAML
        run: kubectl apply -f ./products-service-deployment.yaml --dry-run=client
        # Valida el archivo de despliegue antes de aplicarlo

      - name: Deploy to Kubernetes
        run: kubectl apply -f ./products-service-deployment.yaml
        # Aplica el archivo de despliegue a Kubernetes
        
      - name: Test API Endpoint
        run: |
          sleep 30  # Espera unos segundos para que el servicio esté disponible
          EXTERNAL_IP=$(kubectl get svc products-service-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl http://a421b61ad11ad44c8b157f86e3e7f2a2-432921756.us-east-1.elb.amazonaws.com/products
        # Reemplaza <EXTERNAL-IP> con la IP externa de tu servicio
